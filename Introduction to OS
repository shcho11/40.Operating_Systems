What Operating Systems Do
: A program that acts as an intermediary between the computer user and the computer hardware
컴퓨터 사용자와 하드웨어를 이어주는 역할을 하는 프로그램

: OS is a resource allocator.
OS는 자원을 할당하고 (자원을 관리하며, 리퀘스트의 충돌을 제어한다)
: OS is a control program.
OS는 제어 프로그램이다. (에러 또는 부적절한 컴퓨터 사용을 방지하기 위한 프로그램 제어를 수행한다)

* Kernel (커널)

: The One program running at all times on the computer - usually is called the kernel
컴퓨터 상에서 항상 동작하는 프로그램으로서, OS의 기본이 되는 프로그램 (핵)

: Along with kernel, there are two other types of programs : system programs & application programs
커널과 함께 2가지 프로그램 종류가 있다.
- 시스템 프로그램 : OS와 연관되지만 커널의 일부가 아닌 프로그램
- 애플리케이션 프로그램 : 시스템 운영과는 관계 없는 모든 종류의 프로그램

* Bootstrap progarm (부트스트랩 프로그램)

: Bootstrap program is loaded at power-up or reboot
부트스트랩 프로그램은 전원부팅 또는 리부팅시 로드된다

: Typiclly stored in ROM or EEPROM, generally known as firmware
일반적으로 ROM 또는 EEPROM (일반적으로 펌웨어 라고 알려져 있음)에 저장되어 있다.

: Initialize all aspects of System
시스템의 모든 측면을 시작 (시동)하는 것

: Loads operating system kernel and starts execution
운영체제 커널을 로드(적재)하고 실행시킨다

* Interrupts (인터럽트)

Common Functions of Interrupts (인터럽트의 일반적인 기능들)

: CPU가 인터럽트되면 CPU는 작업을 중단하고 immediately transfers execution to a fixed location(즉각 고정된 위치로 실행위치를 옮긴다. 즉, 인터럽트의 서비스루틴이 위치한 시작점으로)
: 인터럽트 처리 완료시, CPU는 (인터럽트되었던) 원래 작업을 재개한다
: 인터럽트는 인터럽트서비스루틴으로 control(CPU 제어)를 이동시킨다.
: 인터럽트된 시스템은 해당 명령의 주소를 기억해두어야 한다.
: 인터럽트를 수행하고 나면, 저장되었던 리턴 주소가 program counter에 불러와, 마치 인터럽트가 없었던 것과 같이 기존 작업을 재개한다.
: trap 또는 exception은 에러나 사용자요청에 따라 발생하는 software-generated interrupt이다.
: OS는 인터럽트 드리븐(interrupt-driven)으로 동작한다.

Storage Structure

: Main memory : CPU가 직접 액세스할 수 있는 유일한 대용량 스토리지. 휘발성.
: Secondary storage : Main memory의 확장. 대용량 비휘발성 스토리지 제공. 
: Hard disks : 자성 기록 물질이 도포된, 금속 또는 유리 플래터 (딱딱한 성질의 원반)
- 디스크 표면은 논리적으로 tracks로 구분되며, 이것은 다시 sectors 로 구분된다.
- 디스크 컨트롤러는 디바이스와 컨트롤러 사이의 logical interactions(논리적 상호작용)을 제어한다.
: Solid State Drives : 하드디스크보다 속도가 더 빠르며, 비휘발성.
- 다양한 기술의 결합.
- 더욱 대중화되고 있음.

: Storage의 계층 구조는 Speed, Cost, Volatility 에 의해 정의됨
: Caching (캐싱) :  더 빠른 속도의 저장장치로 정보를 복사하는 행위. 메인메모리는 Secondary storage에 있어서는 최종적 cahce로 볼 수 있음.


I/O Structure (입출력 구조)

: 일반적인 목적의 컴퓨터 시스템은 CPU와 복수의 (common bus로 서로 연결되는) device controllers로 구성되어 있다.
- 각각의 device controllers는 특정 타입의 디바이스를 담당.
- 한 device controller는 some local buffer storage와 set of special-purpose registers을 유지시킨다.
: 운영체제는 각 디바이스 컨트롤러당 한개의 디바이스 드라이버를 가진다.

: 입출력이 시작되면, controls이 입출력이 완료(completion)되어야만 user program에 복귀하는 경우
- Wait Instruction은 다음 인터럽트 때까지 CPU를 idle(유휴) 상태로 만든다.
- Wait Loop : 메모리 액세스에 대한 contention(경합)
- 최대 하나의 I/O request만 outstanding 할 수 있음. (동시에 I/O Processing 발생 불가.)

: 입출력이 시작되면 controls이 입출력이 완료될때까지 기다리지 않고 user program에 복귀하는 경우
- System call : 입출력 완료 때까지 user가 기다리도록 운영체제가 허용해 줄 것을 요청하는 것.
  (나무위키 설명 :  커널에 요청하여 커널 모드에서 처리하고 그 결과를 사용자 모드의 프로그램에게 전달하는 것)
  사용자모드에 있는 프로그램이 커널 함수를 직접 호출할 수 없으므로 따로 프로그램이 커널 호출을 요청하는 시스템을 만들어서 커널이 처리해야 할 일을 프로그램으로부터 받아서 처리하는 것
  만약에 없으면 사용자모드에서 아무것도 할 수 없게 됨. 그래픽 출력이라거나 파일 다루는 등 행위도 커널의 도움으로 이루어짐.)
  
  
  
  









